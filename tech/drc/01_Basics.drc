# Basic check for layer polygons
# ----- ------ ----- ----- ------ ----- ----- ------ ----- 
# Original version was made by jun1okamura from TokaiRika's document 
# LICENSE: Apache License Version 2.0, January 2004,
#          http://www.apache.org/licenses/
# ----- ------ ----- ----- ------ ----- ----- ------ ----- 
#  Check NO support Layers
#
(RHP ).output( "ERR01: CANNOT EXIST RHP " )
(HPBE).output( "ERR01: CANNOT EXIST HPBE" )
(HNBE).output( "ERR01: CANNOT EXIST HNBE" )
#(HPM ).output( "ERR01: CANNOT EXIST HPM " )
# --------- --------- --------- --------- --------- --------- ---------
#  Check off Grid
#
(PSUB).ongrid( 0.050 ).output( "ERR01: OFFGRID 0.050" )
(NW  ).ongrid( 0.050 ).output( "ERR01: OFFGRID 0.050" )
(HVNW).ongrid( 0.050 ).output( "ERR01: OFFGRID 0.050" )
(L   ).ongrid( 0.050 ).output( "ERR01: OFFGRID 0.050" )
(NF  ).ongrid( 0.050 ).output( "ERR01: OFFGRID 0.050" )
(PF  ).ongrid( 0.050 ).output( "ERR01: OFFGRID 0.050" )
(CL  ).ongrid( 0.050 ).output( "ERR01: OFFGRID 0.050" )
(PBE ).ongrid( 0.050 ).output( "ERR01: OFFGRID 0.050" )
(NBE ).ongrid( 0.050 ).output( "ERR01: OFFGRID 0.050" )
(SG  ).ongrid( 0.050 ).output( "ERR01: OFFGRID 0.050" )
(PM  ).ongrid( 0.050 ).output( "ERR01: OFFGRID 0.050" )
(NW  ).ongrid( 0.050 ).output( "ERR01: OFFGRID 0.050" )
(R   ).ongrid( 0.050 ).output( "ERR01: OFFGRID 0.050" )
(PSD ).ongrid( 0.050 ).output( "ERR01: OFFGRID 0.050" )
(NSD ).ongrid( 0.050 ).output( "ERR01: OFFGRID 0.050" )
(CONT).ongrid( 0.050 ).output( "ERR01: OFFGRID 0.050" )
(M1  ).ongrid( 0.050 ).output( "ERR01: OFFGRID 0.050" )
(TC  ).ongrid( 0.050 ).output( "ERR01: OFFGRID 0.050" )
(M2  ).ongrid( 0.050 ).output( "ERR01: OFFGRID 0.050" )
(PRO ).ongrid( 0.050 ).output( "ERR01: OFFGRID 0.050" )
# --------- --------- --------- --------- --------- --------- ---------
#  Twisted Polygon
#
(PSUB).odd_polygons.output("ERR01: twisted polygon")
(NW  ).odd_polygons.output("ERR01: twisted polygon")
(HVNW).odd_polygons.output("ERR01: twisted polygon")
(L   ).odd_polygons.output("ERR01: twisted polygon")
(NF  ).odd_polygons.output("ERR01: twisted polygon")
(PF  ).odd_polygons.output("ERR01: twisted polygon")
(CL  ).odd_polygons.output("ERR01: twisted polygon")
(PBE ).odd_polygons.output("ERR01: twisted polygon")
(NBE ).odd_polygons.output("ERR01: twisted polygon")
(SG  ).odd_polygons.output("ERR01: twisted polygon")
(PM  ).odd_polygons.output("ERR01: twisted polygon")
(NW  ).odd_polygons.output("ERR01: twisted polygon")
(R   ).odd_polygons.output("ERR01: twisted polygon")
(PSD ).odd_polygons.output("ERR01: twisted polygon")
(NSD ).odd_polygons.output("ERR01: twisted polygon")
(CONT).odd_polygons.output("ERR01: twisted polygon")
(M1  ).odd_polygons.output("ERR01: twisted polygon")
(TC  ).odd_polygons.output("ERR01: twisted polygon")
(M2  ).odd_polygons.output("ERR01: twisted polygon")
(PRO ).odd_polygons.output("ERR01: twisted polygon")
# --------- --------- --------- --------- --------- --------- ---------
#  Check Non-diagonal shape
#
(PSUB).drc(if_none( rectilinear, angle(absolute) == 45 )).output( "ERR01: NOT Diagonal" )
(NW  ).drc(if_none( rectilinear, angle(absolute) == 45 )).output( "ERR01: NOT Diagonal" )
(HVNW).drc(if_none( rectilinear, angle(absolute) == 45 )).output( "ERR01: NOT Diagonal" )
(L   ).drc(if_none( rectilinear, angle(absolute) == 45 )).output( "ERR01: NOT Diagonal" )
(NF  ).drc(if_none( rectilinear, angle(absolute) == 45 )).output( "ERR01: NOT Diagonal" )
(PF  ).drc(if_none( rectilinear, angle(absolute) == 45 )).output( "ERR01: NOT Diagonal" )
(CL  ).drc(if_none( rectilinear, angle(absolute) == 45 )).output( "ERR01: NOT Diagonal" )
(PBE ).drc(if_none( rectilinear, angle(absolute) == 45 )).output( "ERR01: NOT Diagonal" )
(NBE ).drc(if_none( rectilinear, angle(absolute) == 45 )).output( "ERR01: NOT Diagonal" )
(SG  ).drc(if_none( rectilinear, angle(absolute) == 45 )).output( "ERR01: NOT Diagonal" )
(PM  ).drc(if_none( rectilinear, angle(absolute) == 45 )).output( "ERR01: NOT Diagonal" )
(NW  ).drc(if_none( rectilinear, angle(absolute) == 45 )).output( "ERR01: NOT Diagonal" )
(R   ).drc(if_none( rectilinear, angle(absolute) == 45 )).output( "ERR01: NOT Diagonal" )
(PSD ).drc(if_none( rectilinear, angle(absolute) == 45 )).output( "ERR01: NOT Diagonal" )
(NSD ).drc(if_none( rectilinear, angle(absolute) == 45 )).output( "ERR01: NOT Diagonal" )
(CONT).drc(if_none( rectilinear, angle(absolute) == 45 )).output( "ERR01: NOT Diagonal" )
(M1  ).drc(if_none( rectilinear, angle(absolute) == 45 )).output( "ERR01: NOT Diagonal" )
(TC  ).drc(if_none( rectilinear, angle(absolute) == 45 )).output( "ERR01: NOT Diagonal" )
(M2  ).drc(if_none( rectilinear, angle(absolute) == 45 )).output( "ERR01: NOT Diagonal" )
(PRO ).drc(if_none( rectilinear, angle(absolute) == 45 )).output( "ERR01: NOT Diagonal" )
# --------- --------- --------- --------- --------- --------- ---------
#  Line 
#
(PSUB).drc( width <  8.0 ).output( "ERR01: Width for PSUB <  8.0" )
(NW  ).drc( width <  8.0 ).output( "ERR01: Width for NW   <  8.0" )
(HVNW).drc( width <  8.0 ).output( "ERR01: Width for HVNW <  8.0" )
(L   ).drc( width <  1.4 ).output( "ERR01: Width for L    <  1.4" )
(NF  ).drc( width <  8.0 ).output( "ERR01: Width for NF   <  8.0" )
(PF  ).drc( width <  3.0 ).output( "ERR01: Width for PF   <  3.0" )
(CL  ).drc( width <  3.0 ).output( "ERR01: Width for CL   <  3.0" )
(PBE ).drc( width <  4.2 ).output( "ERR01: Width for PBE  <  4.2" )
(NBE ).drc( width <  4.2 ).output( "ERR01: Width for NBE  <  4.2" )
(SG  ).drc( width <  1.0 ).output( "ERR01: Width for SG   <  1.0" )
(PM  ).drc( width <  4.2 ).output( "ERR01: Width for PM   <  4.2" )
(NW  ).drc( width <  4.2 ).output( "ERR01: Width for NM   <  4.2" )
(R   ).drc( width <  4.0 ).output( "ERR01: Width for R    <  4.0" )
(PSD ).drc( width <  3.5 ).output( "ERR01: Width for PSD  <  3.5" )
(NSD ).drc( width <  2.6 ).output( "ERR01: Width for NSD  <  2.6" )
(CONT).drc( width <  1.0 ).output( "ERR01: Width for CONT <  1.0" )
(M1  ).drc( width <  1.8 ).output( "ERR01: Width for M1   <  1.8" )
(TC  ).drc( width <  1.4 ).output( "ERR01: Width for TC   <  1.4" )
(M2  ).drc( width <  3.0 ).output( "ERR01: Width for M2   <  3.0" )
(PRO ).drc( width < 10.0 ).output( "ERR01: Width for PRO  < 10.0" )
# --------- --------- --------- --------- --------- --------- ---------
#  Space
#
(PSUB).drc( space <  4.0 ).output( "ERR01: Space for PSUB <  4.0" )
(NW  ).drc( space <  4.0 ).output( "ERR01: Space for NW   <  4.0" )
(HVNW).drc( space <  4.0 ).output( "ERR01: Space for HVNW <  4.0" )
(L   ).drc( space <  1.4 ).output( "ERR01: Space for L    <  1.4" )
(NF  ).drc( space <  2.0 ).output( "ERR01: Space for NF   <  2.0" )
(PF  ).drc( space <  2.0 ).output( "ERR01: Space for PF   <  2.0" )
(CL  ).drc( space <  3.0 ).output( "ERR01: Space for CL   <  3.0" )
(PBE ).drc( space <  2.6 ).output( "ERR01: Space for PBE  <  2.6" )
(NBE ).drc( space <  2.6 ).output( "ERR01: Space for NBE  <  2.6" )
(SG  ).drc( space <  1.2 ).output( "ERR01: Space for SG   <  1.2" )
(PM  ).drc( space <  2.6 ).output( "ERR01: Space for PM   <  2.6" )
(NW  ).drc( space <  2.6 ).output( "ERR01: Space for NM   <  2.6" )
(R   ).drc( space <  2.6 ).output( "ERR01: Space for R    <  2.6" )
(PSD ).drc( space <  2.2 ).output( "ERR01: Space for PSD  <  2.2" )
(NSD ).drc( space <  2.6 ).output( "ERR01: Space for NSD  <  2.6" )
(CONT).drc( space <  1.0 ).output( "ERR01: Space for CONT <  1.0" )
(M1  ).drc( space <  1.4 ).output( "ERR01: Space for M1   <  1.4" )
(TC  ).drc( space <  1.5 ).output( "ERR01: Space for TC   <  1.5" )
(M2  ).drc( space <  2.0 ).output( "ERR01: Space for M2   <  2.0" )
(PRO ).drc( space < 20.0 ).output( "ERR01: Space for PRO  < 20.0" )
